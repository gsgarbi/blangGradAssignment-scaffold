package blang.validation.internals.fixtures

import briefj.collections.UnorderedPair



model Ising {
  param Integer N ?: 5
  random List<IntVar> vertices ?: latentIntList(N*N)

  laws {

//    // Pairwise potentials
//    for (UnorderedPair<Integer, Integer> pair : squareIsingEdges(N)) {
//      | IntVar first  = vertices.get(pair.getFirst),
//        IntVar second = vertices.get(pair.getSecond)
//      ~ LogPotential(
//          if ((first < 0 || first > 1 || second < 0 || second > 1))
//            return NEGATIVE_INFINITY
//          else
//            return (2*first-1)*(2*second-1))
    }

//    // Node potentials
//    for (IntVar vertex : vertices) {
//      vertex ~ Bernoulli(0.5)
    }
  

